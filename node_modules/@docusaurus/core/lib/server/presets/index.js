"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const import_fresh_1 = __importDefault(require("import-fresh"));
const lodash_1 = __importDefault(require("lodash"));
function loadPresets(context) {
    const presets = (context.siteConfig || {}).presets || [];
    const unflatPlugins = [];
    const unflatThemes = [];
    presets.forEach(presetItem => {
        let presetModuleImport;
        let presetOptions = {};
        if (typeof presetItem === 'string') {
            presetModuleImport = presetItem;
        }
        else if (Array.isArray(presetItem)) {
            presetModuleImport = presetItem[0];
            presetOptions = presetItem[1] || {};
        }
        else {
            throw new Error('Invalid presets format detected in config.');
        }
        const presetModule = import_fresh_1.default(presetModuleImport);
        const preset = (presetModule.default || presetModule)(context, presetOptions);
        preset.plugins && unflatPlugins.push(preset.plugins);
        preset.themes && unflatThemes.push(preset.themes);
    });
    return {
        plugins: lodash_1.default.compact(lodash_1.default.flatten(unflatPlugins)),
        themes: lodash_1.default.compact(lodash_1.default.flatten(unflatThemes)),
    };
}
exports.loadPresets = loadPresets;
