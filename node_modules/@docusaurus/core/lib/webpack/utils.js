"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const std_env_1 = __importDefault(require("std-env"));
const webpack_merge_1 = __importDefault(require("webpack-merge"));
const package_json_1 = require("cache-loader/package.json");
// Utility method to get style loaders
function getStyleLoaders(isServer, cssOptions = {}) {
    if (isServer) {
        return [
            cssOptions.modules
                ? {
                    loader: require.resolve('css-loader'),
                    options: cssOptions,
                }
                : require.resolve('null-loader'),
        ];
    }
    const isProd = process.env.NODE_ENV === 'production';
    const loaders = [
        {
            loader: mini_css_extract_plugin_1.default.loader,
            options: {
                hmr: !isProd,
            },
        },
        {
            loader: require.resolve('css-loader'),
            options: cssOptions,
        },
        {
            // Options for PostCSS as we reference these options twice
            // Adds vendor prefixing based on your specified browser support in
            // package.json
            loader: require.resolve('postcss-loader'),
            options: {
                // Necessary for external CSS imports to work
                // https://github.com/facebook/create-react-app/issues/2677
                ident: 'postcss',
                plugins: () => [
                    require('postcss-preset-env')({
                        autoprefixer: {
                            flexbox: 'no-2009',
                        },
                        stage: 3,
                    }),
                ],
            },
        },
    ];
    return loaders;
}
exports.getStyleLoaders = getStyleLoaders;
function getCacheLoader(isServer, cacheOptions) {
    if (std_env_1.default.ci || std_env_1.default.test) {
        return null;
    }
    return {
        loader: require.resolve('cache-loader'),
        options: Object.assign({
            cacheIdentifier: `cache-loader:${package_json_1.version}${isServer}`,
        }, cacheOptions),
    };
}
exports.getCacheLoader = getCacheLoader;
function getBabelLoader(isServer, babelOptions) {
    const absoluteRuntimePath = path_1.default.dirname(require.resolve(`@babel/runtime/package.json`));
    return {
        loader: require.resolve('babel-loader'),
        options: Object.assign({
            babelrc: false,
            configFile: false,
            // All optional newlines and whitespace will be omitted when generating code in compact mode
            compact: true,
            presets: [
                isServer
                    ? [
                        '@babel/env',
                        {
                            targets: {
                                node: 'current',
                            },
                        },
                    ]
                    : [
                        '@babel/env',
                        {
                            useBuiltIns: 'usage',
                            loose: true,
                            corejs: '2',
                            // Do not transform modules to CJS
                            modules: false,
                            // Exclude transforms that make all code slower
                            exclude: ['transform-typeof-symbol'],
                        },
                    ],
                '@babel/react',
                '@babel/preset-typescript',
            ],
            plugins: [
                // Polyfills the runtime needed for async/await, generators, and friends
                // https://babeljs.io/docs/en/babel-plugin-transform-runtime
                [
                    '@babel/plugin-transform-runtime',
                    {
                        corejs: false,
                        helpers: true,
                        // By default, it assumes @babel/runtime@7.0.0. Since we use >7.0.0, better to
                        // explicitly specify the version so that it can reuse the helper better
                        // See https://github.com/babel/babel/issues/10261
                        version: require('@babel/runtime/package.json').version,
                        regenerator: true,
                        useESModules: true,
                        // Undocumented option that lets us encapsulate our runtime, ensuring
                        // the correct version is used
                        // https://github.com/babel/babel/blob/090c364a90fe73d36a30707fc612ce037bdbbb24/packages/babel-plugin-transform-runtime/src/index.js#L35-L42
                        absoluteRuntime: absoluteRuntimePath,
                    },
                ],
                // Adds syntax support for import()
                isServer ? 'dynamic-import-node' : '@babel/syntax-dynamic-import',
            ],
        }, babelOptions),
    };
}
exports.getBabelLoader = getBabelLoader;
/**
 * Helper function to modify webpack config
 * @param {Object | Function} configureWebpack a webpack config or a function to modify config
 * @param {Object} config initial webpack config
 * @param {boolean} isServer indicates if this is a server webpack configuration
 * @returns {Object} final/ modified webpack config
 */
function applyConfigureWebpack(configureWebpack, config, isServer) {
    if (typeof configureWebpack === 'object') {
        return webpack_merge_1.default(config, configureWebpack);
    }
    // Export some utility functions
    const utils = {
        getStyleLoaders,
        getCacheLoader,
        getBabelLoader,
    };
    if (typeof configureWebpack === 'function') {
        const res = configureWebpack(config, isServer, utils);
        if (res && typeof res === 'object') {
            return webpack_merge_1.default(config, res);
        }
    }
    return config;
}
exports.applyConfigureWebpack = applyConfigureWebpack;
